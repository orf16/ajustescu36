@model List<SG_SST.Models.Planificacion.CicloModel>
@{
    var idCiclo = "cicloActual";
    var opciones = Model.Select(c => new SelectListItem() { Value = c.IdCiclo.ToString(), Text = c.Nombre }).ToList();
    opciones.Add(new SelectListItem() { Value = "5", Text = "Calificación de los Ciclos..." });

}
<script src="~/Scripts/EvaluacionEstandarMinimo/reportes-estandar-minimos.js"></script>
<div id="remover1" class="panel-heading" style="color:black">
    Gráfica de Calificación del Estándar por cada ciclo del EM-SGSST
</div>
@*ayuda*@
<div id="remover3" align="right" style="margin-right:5px;margin-top:5px;">
    <div id="ayuda" style="text-align:right">
        <a href="" data-toggle="modal" id="elIDdelModal" data-target="#@string.Format("modalAyuda")"
           title="Ayuda" class="btn btn-ayuda btn-md">
            <i class="glyphicon glyphicon-question-sign"></i>
        </a>
        <div id="@string.Format("modalAyuda")" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header encabezado" style="background-color:transparent; border-bottom:none">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                        <h4 class="modal-title title">Ayuda / INFORME PARCIAL</h4>
                    </div>
                    <div class="modal-body " style="color:black">
                        <p style="margin-bottom:20px;line-height: 200%;text-align:justify;"> Seleccione el ciclo que desee examinar</p>

                        <p style="margin-bottom:20px;line-height: 200%;text-align:justify;"> Presione <button type="button" class="boton botoninfo" style="cursor:default;">DESCARGAR ESTÁNDARES MÍNIMOS</button> para descargar una hoja de cálculo con los resultados e informe de la presente evaluación</p>
                        <p style="margin-bottom:20px;line-height: 200%;text-align:justify;"> Presione <button type="button" class="boton botonactive" style="cursor:default;">VOLVER A CALIFICACIÓN</button> para regresar a la calificación de ítems de la evaluación de estándares mínimos</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="boton botoncancel" data-dismiss="modal">Salir</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="container-graficas">
    <div class="inner-graficas">
        <div class="form-group row">
            <div class="col-xs-2">
                <h4>Ciclos:</h4>
            </div>
            <div class="col-xs-10">
                @Html.DropDownList(idCiclo, opciones, "Seleccione un ciclo...", new { @class = "form-control" })
            </div>
            <div  class="col-xs-5">
                
            </div>
        </div>
        <div class="row">
            <h3 id="tit_ciclo"></h3>
        </div>
        <div id="graficarEst"></div>


        <div class="row">

            <div id="generaldiv" class="col-sm-12" style="display:none">
                <div class="col-sm-12 add-bottom-margin-10em" style="border-style:double;padding-bottom:5px;background-color:#fff;margin-top:5px;margin-bottom:10px;">
                    <canvas id="canvasc" style="display: block;" class="chartjs-render-monitor"></canvas>
                </div>
                <table id="general" class="table table-bordered " style="border: 2px solid lightslategray;margin: 10px 5px 5px 5px">
                    <thead>
                        <tr class="titulos_tabla">
                            <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                <span>Ciclo</span>
                            </th>
                            <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                <span>Resultado Esperado</span>
                            </th>
                            <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                <span>Resultado Obtenido</span>
                            </th>
                            <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                <span>Porcentaje del Ciclo Obtenido</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="inner_actividades_agr" class="head-activ">
                        @{
                            decimal tot = 0;
                            decimal tot1 = 0;
                            foreach (var item in Model)
                            {
                                decimal PorcenObtenido = Decimal.Round(item.PorcenObtenido, 2);
                                decimal puntoObtenidos = Decimal.Round(item.puntoObtenidos, 2);


                                tot = tot + item.puntoObtenidos;
                                tot1 = tot1 + item.PorcenObtenido;
                                <tr class="fila_existente" edicion="existente" estado="sin">
                                    <td class="graphDesc" descripcion="@item.Nombre" style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@item.Nombre</td>
                                    <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@item.Porcentaje%</td>
                                    <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@puntoObtenidos%</td>
                                    <td class="graphResult" resultado="@PorcenObtenido" style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@PorcenObtenido%</td>
                                </tr>
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr class="titulos_tabla">
                            <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                <b>TOTAL</b>
                            </td>
                            <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                <b>100%</b>
                            </td>
                            <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                @{
                                    tot1 = (tot / 100) * 100;
                                    tot1 = Decimal.Round(tot1, 2);
                                    if (tot > 100)
                                    {
                                        <b>100%</b>
                                    }
                                    else
                                    {
                                        tot = Decimal.Round(tot, 2);
                                        <b>@tot%</b>
                                    }
                                }

                            </td>
                            <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                @{
                                    <b>@tot1%</b>
                                }
                            </td>
                        </tr>
                    </tfoot>
                </table>

            </div>
        </div>

        @{
            foreach (var item in Model)
            {

                string div = "div" + item.IdCiclo;
                string table = "table" + item.IdCiclo;
                string canvas = "canvas" + item.IdCiclo;

                <div class="row">
                    <div id="@div" class="col-sm-12" style="display:none">

                        <div class="col-sm-12 add-bottom-margin-10em" style="border-style:double;padding-bottom:5px;background-color:#fff;margin-top:5px;margin-bottom:10px;">
                            <canvas id="@canvas" style="display: block;" class="chartjs-render-monitor"></canvas>
                        </div>
                        <table id="@table" class="table table-bordered " style="border: 2px solid lightslategray;margin: 10px 5px 5px 5px">
                            <thead>
                                <tr class="titulos_tabla">
                                    <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                        <span>Estandar</span>
                                    </th>
                                    <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                        <span>Resultado Esperado</span>
                                    </th>
                                    <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                        <span>Resultado Obtenido</span>
                                    </th>
                                    <th style="border-right: 2px solid lightslategray; border-bottom: 2px solid lightslategray; text-align:center;vertical-align:middle;">
                                        <span>Porcentaje del Estandar Obtenido</span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="inner_actividades_agr" class="head-activ">
                                @{
                                    decimal tot2 = 0;
                                    decimal tot3 = 0;
                                    foreach (var item2 in item.Estandares)
                                    {
                                        decimal PorcenObtenido = Decimal.Round(item2.CalificacionFinal, 2);
                                        decimal puntoObtenidos = Decimal.Round(item2.Porcentaje, 2);


                                        tot2 = tot2 + item2.Porcentaje_Max;
                                        tot3 = tot3 + item2.Porcentaje;
                                        <tr class="fila_existente" edicion="existente" estado="sin">
                                            <td class="graphDesc" descripcion="@item2.Descripcion" style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@item2.Descripcion</td>
                                            <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@item2.Porcentaje_Max%</td>
                                            <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@puntoObtenidos%</td>
                                            <td class="graphResult" resultado="@PorcenObtenido" style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;">@PorcenObtenido%</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                            <tfoot>
                                <tr class="titulos_tabla">
                                    <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                        <b>TOTAL</b>
                                    </td>
                                    <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                        @{
                                            decimal tot5 = (tot3 / tot2) * 100;
                                            tot5 = Decimal.Round(tot5, 2);
                                            if (tot2 > 100)
                                            {
                                                <b>100%</b>
                                            }
                                            else
                                            {
                                                tot2 = Decimal.Round(tot2, 2);
                                                <b>@tot2%</b>
                                            }
                                        }
                                    </td>
                                    <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                        @{
                                            if (tot3 > 100)
                                            {
                                                <b>100%</b>
                                            }
                                            else
                                            {
                                                tot3 = Decimal.Round(tot3, 2);
                                                <b>@tot3%</b>
                                            }
                                        }

                                    </td>
                                    <td style="border-right: 2px solid lightslategray; vertical-align:middle;text-align:center;border-top:2px solid lightslategray;">
                                        @{

                                            <b>@tot5%</b>
                                        }
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                                            }
        }



        <div class="form-group row">
            <button id="descargarGraficaFinalExcel" style="margin-top: 10px;display:none;" type="button" class="agr_aspec btn btn-default boton botoninfo">
                Descargar Excel
            </button>
            <button id="descargarExcelParcial" style="margin-top: 10px; display:none;" type="button" class="agr_aspec btn btn-default boton botoninfo">
                Descargar Excel
            </button>

            <div class="col-sm-12 col-md-12">
                <button id="descargarEstandaresMinimos" style="margin-top: 10px" type="button" class="agr_aspec btn btn-default boton botoninfo">
                    Descargar Estándares Mínimos
                </button>
            </div>
            <div id="remover2" class="col-sm-12 col-md-12" style="margin-top:8px;">
                <button id="volver_calf_est" type="button" class="boton botonactive">
                    Volver a calificación
                </button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    //Graficas Ciclos
    $(document).ready(function () {
        console.log('graph');
        var tables1 = document.getElementById("general");
        var tbody = $('#general > tbody');
        //var graficotabla = tables1.attr('name');
        //var NomPilar = tables1.attr('pilar');
        //Elemento que muestra la grafica
        var ctx1 = document.getElementById("canvasc");
        //Colores
        var coloresgen = ['rgba(13,149,188,1)',
'rgba(92,167,147,1)',
'rgba(235,203,56,1)',
'rgba(243,111,19,1)',
'rgba(193,48,24,1)',
'rgba(208, 178, 109,1)',
'rgba(109, 208, 189,1)',
'rgba(208, 109, 152,1)',
'rgba(255, 176, 128,1)',
'rgba(151, 165, 158,1)',
'rgba(13,149,188,1)',
'rgba(6,57,81,1)',
'rgba(92,167,147,1)',
'rgba(235,203,56,1)',
'rgba(243,111,19,1)',
'rgba(193,48,24,1)',
'rgba(208, 178, 109,1)',
'rgba(109, 208, 189,1)',
'rgba(208, 109, 152,1)',
'rgba(255, 135, 61,1)',
'rgba(6,57,81,1)',
'rgba(151, 165, 158,1)'];
        //Nombre del elemento
        var labsArray = new Array();
        //Aqui se ubican los resultados
        var datasArray = new Array();
        //Colores del resultado
        var ColorArray = new Array();
        var sumaResultados = 100;
        tbody.find('tr').each(function () {
            var fila = $(this);
            fila.find('td.graphDesc').each(function () {
                var Descripcion = this;
                var descParametro = $(Descripcion).attr('descripcion');
                labsArray.push(descParametro);
            });
            fila.find('td.graphResult').each(function () {
                var resultado = this;
                var resultadoParametro = $(resultado).attr('resultado');
                var decimal = resultadoParametro.replace(",", ".");
                datasArray.push(decimal);
                sumaResultados = sumaResultados - decimal;
            });
        });
        var cont = 0;
        $.each(labsArray, function (key, value) {
            var color = coloresgen[key];
            ColorArray.push(color);
            cont++;
        });

        var chartOptions = {
            responsive: true,
            scales: {
                xAxes: [{
                    gridLines: {
                        zeroLineColor: "black",
                        zeroLineWidth: 2
                    },
                    ticks: {
                        min: 0,
                        max: 100,
                        stepSize: 10
                    },
                    afterFit: function (scaleInstance) {
                        scaleInstance.width = 100; // sets the width to 100px
                    }
                }]
            }, title: {
                display: true,
                text: 'Resultado de todos los ciclos',
                fontSize: 20
            },
            "animation": {
                "duration": 1
            },
            legend: {
                display: false
            },
            "animation": {
                "duration": 1,
                "onComplete": function () {
                    var chartInstance = this.chart,
                      ctx = chartInstance.ctx;

                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    ctx.fillStyle = "#000000";

                    this.data.datasets.forEach(function (dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];
                            ctx.fillText(data, bar._model.x - 15, bar._model.y - 5);
                        });
                    });
                }
            }
        };

        var myChart = new Chart(ctx1, {
            type: 'horizontalBar',
            data: {
                label: 'Valor Transformado',
                labels: labsArray,
                datasets: [{
                    data: datasArray,
                    backgroundColor: ColorArray

                }]
            }
        ,
            options: chartOptions
            , onAnimationComplete: function () {


            }


        });
    });
    //Graficas Estandares
    $(document).ready(function () {
        var listaciclos = [1, 2, 3, 4];

        for (var i = 0, l = listaciclos.length; i < l; i++) {
            ciclo = listaciclos[i];


            console.log('graph1');
            var tables1 = document.getElementById("general");
            var tbody = $('#table' + ciclo + ' > tbody');
            //var graficotabla = tables1.attr('name');
            //var NomPilar = tables1.attr('pilar');
            //Elemento que muestra la grafica
            var ctx1 = document.getElementById("canvas"+ciclo+"");
            //Colores
            var coloresgen = ['rgba(13,149,188,1)',
    'rgba(92,167,147,1)',
    'rgba(235,203,56,1)',
    'rgba(243,111,19,1)',
    'rgba(193,48,24,1)',
    'rgba(208, 178, 109,1)',
    'rgba(109, 208, 189,1)',
    'rgba(208, 109, 152,1)',
    'rgba(255, 176, 128,1)',
    'rgba(151, 165, 158,1)',
    'rgba(13,149,188,1)',
    'rgba(6,57,81,1)',
    'rgba(92,167,147,1)',
    'rgba(235,203,56,1)',
    'rgba(243,111,19,1)',
    'rgba(193,48,24,1)',
    'rgba(208, 178, 109,1)',
    'rgba(109, 208, 189,1)',
    'rgba(208, 109, 152,1)',
    'rgba(255, 135, 61,1)',
    'rgba(6,57,81,1)',
    'rgba(151, 165, 158,1)'];
            //Nombre del elemento
            var labsArray = new Array();
            //Aqui se ubican los resultados
            var datasArray = new Array();
            //Colores del resultado
            var ColorArray = new Array();
            var sumaResultados = 100;
            tbody.find('tr').each(function () {
                var fila = $(this);
                fila.find('td.graphDesc').each(function () {
                    var Descripcion = this;
                    var labs = new Array();
                    var descParametro = $(Descripcion).attr('descripcion');
                    var res = descParametro.split(" ");
                    var numeropla = res.length;
                    if (numeropla > 10) {
                        labs.push(res[0] + " " + res[1] + " " + res[2] + " " + res[3] + " " + res[4]);
                        labs.push(res[5] + " " + res[6] + " " + res[7] + " " + res[8] + " " + res[9] + " " + res[10]);
                    }
                    else {
                        labs.push(descParametro);
                    }
                    labsArray.push(labs);
                });
                fila.find('td.graphResult').each(function () {
                    var resultado = this;
                    var resultadoParametro = $(resultado).attr('resultado');
                    var decimal = resultadoParametro.replace(",", ".");
                    datasArray.push(decimal);
                    sumaResultados = sumaResultados - decimal;
                });
            });
            var cont = 0;
            $.each(labsArray, function (key, value) {
                var color = coloresgen[key];
                ColorArray.push(color);
                cont++;
            });

            var chartOptions = {
                responsive: true,
                scales: {
                    xAxes: [{
                        gridLines: {
                            zeroLineColor: "black",
                            zeroLineWidth: 2
                        },
                        ticks: {
                            min: 0,
                            max: 100,
                            stepSize: 10
                        },
                        afterFit: function (scaleInstance) {
                            scaleInstance.width = 100; // sets the width to 100px
                        }
                    }]
                }, title: {
                    display: true,
                    text: 'Resultado de todos los ciclos',
                    fontSize: 20
                },
                "animation": {
                    "duration": 1
                },
                legend: {
                    display: false
                },
                "animation": {
                    "duration": 1,
                    "onComplete": function () {
                        var chartInstance = this.chart,
                          ctx = chartInstance.ctx;

                        ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'bottom';
                        ctx.fillStyle = "#000000";

                        this.data.datasets.forEach(function (dataset, i) {
                            var meta = chartInstance.controller.getDatasetMeta(i);
                            meta.data.forEach(function (bar, index) {
                                var data = dataset.data[index];
                                ctx.fillText(data, bar._model.x - 15, bar._model.y - 5);
                            });
                        });
                    }
                }
            };
            var myChart = new Chart(ctx1, {
                type: 'horizontalBar',
                data: {
                    label: 'Valor Transformado',
                    labels: labsArray,
                    datasets: [{
                        data: datasArray,
                        backgroundColor: ColorArray

                    }]
                }
            ,
                options: chartOptions
                , onAnimationComplete: function () {


                }


            });
        }

    });


    $(document).ready(function () {
        var rangoColores = ["#A9CCE3", "#D4AC0D", "#58D68D", "#F1948A", "#73C6B6", "#B03A2E", "#A569BD", "#138D75", "#D4AC0D", "#85C1E9", "#A93226", "#616A6B", "#34495E", "#2874A6"];
        var urlBase = utils.getBaseUrl();
        var urlReportes = urlBase + '/EvaluacionEstandarMinimo';
        var anchoSVG = 960;
        var altoSVG = 500;
        var ideval = $('#ideval').val();
        $('#volver_calf_est').on('click', function () {
            window.location.href = urlReportes + '/Index?ideval=' + ideval;
        });
        $('#cicloActual').on('change', function () {
            var cicloSelect = $(this).val();
            var tipoGrafica = 1;
            var urlAccion = '';
            if (cicloSelect == '') {
                swal('Atención', 'Seleccione el ciclo que desea para generar la gráfica.');
                return false;
            }
            switch (cicloSelect) {
                case '1':
                    $('#tit_ciclo').text('I. PLANEAR');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    //$('#descargarExcelParcial').hide();
                    //$('#descargarGraficaFinalExcel').show();
                    $('#generaldiv').hide();
                    $('#div1').show();
                    $('#div2').hide();
                    $('#div3').hide();
                    $('#div4').hide();
                    break;
                case '2':
                    $('#tit_ciclo').text('II. HACER');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    //$('#descargarExcelParcial').hide();
                    //$('#descargarGraficaFinalExcel').show();
                    $('#generaldiv').hide();
                    $('#div2').show();
                    $('#div1').hide();
                    $('#div3').hide();
                    $('#div4').hide();
                    break;
                case '3':
                    $('#tit_ciclo').text('III. VERIFICAR');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    //$('#descargarExcelParcial').hide();
                    //$('#descargarGraficaFinalExcel').show();
                    $('#generaldiv').hide();
                    $('#div3').show();
                    $('#div1').hide();
                    $('#div2').hide();
                    $('#div4').hide();
                    break;
                case '4':
                    $('#tit_ciclo').text('IV. ACTUAR');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    //$('#descargarExcelParcial').hide();
                    //$('#descargarGraficaFinalExcel').show();
                    $('#generaldiv').hide();
                    $('#div4').show();
                    $('#div1').hide();
                    $('#div3').hide();
                    $('#div2').hide();
                    break;
                case '5':
                    $('#tit_ciclo').text('Calificación Ciclos EM-SGSST');
                    urlAccion = '/ObtenerPorcentajePuntajeDePuntajeTotal';
                    tipoGrafica = 2;
                    //$('#descargarGraficaFinalExcel').hide();
                    //$('#descargarExcelParcial').show();
                    $('#generaldiv').show();
                    $('#div1').hide();
                    $('#div2').hide();
                    $('#div3').hide();
                    $('#div4').hide();

                    break;
            }
            if ($('svg').length > 0)
                $('svg').remove();
            PopupPosition();
            if (tipoGrafica == 1) {
                OcultarPopupposition();
            } else {
                $.ajax({
                    type: "POST",
                    url: urlReportes + urlAccion,
                    contentType: "application/json; charset=utf-8",
                    cache: false,
                    dataType: "json",
                    url: urlReportes + urlAccion,
                    data: '{ideval: "' + ideval + '" }'
                }).done(function (response) {
                    if (response != null && response != undefined && response != '' && response.Mensaje == 'OK') {
                        var data = response.Datos;
                        var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                            width = 500 - margin.left - margin.right,
                            height = 300 - margin.top - margin.bottom, padding = 100;

                        var wMaior = 400;
                        var wMenor = 200;

                        var colorscale = d3.scaleOrdinal(d3.schemeCategory10);
                        var legendOptions = ['Calificación'];
                        var size = data.length;
                        var json = [
                            [
                                { "axis": "I. PLANEAR", "value": 0 },
                                { "axis": "IV. ACTUAR", "value": 0 },
                                { "axis": "III. VERIFICAR", "value": 0 },
                                { "axis": "II. HACER", "value": 0 }
                            ]
                        ];
                        if (size > 0) {
                            var json = null;
                            json = [
                                    [
                                        { "axis": "I. PLANEAR", "value": data[0].PorcenObtenido },
                                        { "axis": "IV. ACTUAR", "value": data[3].PorcenObtenido },
                                        { "axis": "III. VERIFICAR", "value": data[2].PorcenObtenido },
                                        { "axis": "II. HACER", "value": data[1].PorcenObtenido }
                                    ]
                            ];
                        }

                        function drawRadarCharts() {
                            drawRadarChart('#graficarEst', wMaior, wMaior);
                        };

                        function drawRadarChart(divId, w, h) {
                            var textSizeLevels = "10px !important";
                            var textSizeTooltip = "13px !important";
                            var textSizeLegend = "11px !important";
                            var circleSize = 5;
                            var strokeWidthPolygon = "2px";

                            var RadarChart = {
                                draw: function (id, data, options) {
                                    var cfg = {
                                        radius: circleSize,
                                        w: w,
                                        h: h,
                                        factor: 1,
                                        factorLegend: .85,
                                        levels: 5,
                                        maxValue: 0,
                                        radians: 2 * Math.PI,
                                        opacityArea: 0.001,
                                        ToRight: 5,
                                        TranslateX: 80,
                                        TranslateY: 30,
                                        ExtraWidthX: 10,
                                        ExtraWidthY: 100,
                                        color: d3.scaleOrdinal(d3.schemeCategory10)
                                    };

                                    if ('undefined' !== typeof options) {
                                        for (var i in options) {
                                            if ('undefined' !== typeof options[i]) {
                                                cfg[i] = options[i];
                                            }
                                        }
                                    }
                                    //cfg.maxValue = Math.max(cfg.maxValue, d3.max(data, function (i) { return d3.max(i.map(function (o) { return o.value; })); }));
                                    cfg.maxValue = 100;
                                    var allAxis = (data[0].map(function (i, j) { return i.axis; }));
                                    var total = allAxis.length;
                                    var radius = cfg.factor * Math.min(cfg.w / 2, cfg.h / 2);
                                    d3.select(id)
                                        .select("svg").remove();

                                    var g = d3.select(id)
                                        .append("svg")
                                        .attr("width", cfg.w + cfg.ExtraWidthX)
                                        .attr("height", cfg.h + cfg.ExtraWidthY)
                                        .attr("class", "graph-svg-component")
                                        .append("g")
                                        .attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");

                                    var tooltip;

                                    //Segmentos circulares por nivel (6 niveles)
                                    for (var j = 0; j < cfg.levels; j++) {
                                        var levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
                                        g.selectAll(".levels")
                                        .data(allAxis)
                                        .enter()
                                        .append("svg:line")
                                        .attr("x1", function (d, i) { return levelFactor * (1 - cfg.factor * Math.sin(i * cfg.radians / total)); })
                                        .attr("y1", function (d, i) { return levelFactor * (1 - cfg.factor * Math.cos(i * cfg.radians / total)); })
                                        .attr("x2", function (d, i) { return levelFactor * (1 - cfg.factor * Math.sin((i + 1) * cfg.radians / total)); })
                                        .attr("y2", function (d, i) { return levelFactor * (1 - cfg.factor * Math.cos((i + 1) * cfg.radians / total)); })
                                        .attr("class", "line")
                                        .style("stroke", "grey")
                                        .style("stroke-opacity", "0.75")
                                        //.style("stroke-width", "0.3px")
                                        .attr("transform", "translate(" + (cfg.w / 2 - levelFactor) + ", " + (cfg.h / 2 - levelFactor) + ")");
                                    }

                                    //Texto indicando el porcentaje (%) de cada nivel
                                    for (var j = 0; j < cfg.levels; j++) {
                                        var levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
                                        g.selectAll(".levels")
                                        .data([1]) //dummy data
                                        .enter()
                                        .append("svg:text")
                                        .attr("x", function (d) { return levelFactor * (1 - cfg.factor * Math.sin(0)); })
                                        .attr("y", function (d) { return levelFactor * (1 - cfg.factor * Math.cos(0)); })
                                        .attr("class", "legend")
                                        .style("font-family", "sans-serif")
                                        .style("font-size", textSizeLevels)
                                        .attr("transform", "translate(" + (cfg.w / 2 - levelFactor + cfg.ToRight) + ", " + (cfg.h / 2 - levelFactor) + ")")
                                        .attr("fill", "#737373")
                                        .text(((j + 1) * cfg.maxValue / cfg.levels) + ' %');
                                    }

                                    series = 0;
                                    var axis = g.selectAll(".axis")
                                    .data(allAxis)
                                    .enter()
                                    .append("g")
                                    .attr("class", axis);

                                    axis.append("line")
                                    .attr("x1", cfg.w / 2)
                                    .attr("y1", cfg.h / 2)
                                    .attr("x2", function (d, i) { return cfg.w / 2 * (1 - cfg.factor * Math.sin(i * cfg.radians / total)); })
                                    .attr("y2", function (d, i) { return cfg.h / 2 * (1 - cfg.factor * Math.cos(i * cfg.radians / total)); })
                                    .attr("class", "line")
                                    .style("stroke", "grey")
                                    .style("stroke-width", "1px");

                                    //Texto en cada vertice (ciclos)
                                    axis.append("text")
                                    .attr("class", "legend")
                                    .text(function (d) { return d; })
                                    .style("font-family", "sans-serif")
                                    .style("font-size", textSizeLegend)
                                    .attr("text-anchor", "middle")
                                    .attr("dy", "1.5em")
                                    .attr("transform", function (d, i) { return "translate(0, -20)"; })
                                    .attr("x", function (d, i) { return cfg.w / 2 * (1 - cfg.factorLegend * Math.sin(i * cfg.radians / total)) - 60 * Math.sin(i * cfg.radians / total); })
                                    .attr("y", function (d, i) { return cfg.h / 2 * (1 - Math.cos(i * cfg.radians / total)) - 20 * Math.cos(i * cfg.radians / total); });

                                    data.forEach(function (y, x) {
                                        dataValues = [];
                                        g.selectAll(".nodes")
                                        .data(y, function (j, i) {
                                            dataValues.push([
                                                cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                                                cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
                                            ]);
                                        });
                                        dataValues.push(dataValues[0]);
                                        g.selectAll(".area")
                                        .data([dataValues])
                                        .enter()
                                        .append("polygon")
                                        .attr("class", "radar-chart-series_" + series)
                                        .style("stroke-width", strokeWidthPolygon)
                                        .style("stroke", cfg.color(series))
                                        .attr("points", function (d) {
                                            var str = "";
                                            for (var pti = 0; pti < d.length; pti++) {
                                                str = str + d[pti][0] + "," + d[pti][1] + " ";
                                            }
                                            return str;
                                        })
                                        .style("fill", function (j, i) {
                                            return cfg.color(series);
                                        })
                                        .style("fill-opacity", cfg.opacityArea)
                                        .on('mouseover', function (d) {
                                            z = "polygon." + d3.select(this).attr("class");
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", 0.1);
                                            g.selectAll(z)
                                            .transition(200)
                                            .style("fill-opacity", 0.7);
                                        })
                                        .on('mouseout', function () {
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", cfg.opacityArea);
                                        });

                                        series++;
                                    });

                                    series = 0;

                                    data.forEach(function (y, x) {
                                        g.selectAll(".nodes")
                                        .data(y).enter()
                                        .append("svg:circle")
                                        .attr("class", "radar-chart-series_" + series)
                                        .attr('r', cfg.radius)
                                        .attr("alt", function (j) { return Math.max(j.value, 0); })
                                        .attr("cx", function (j, i) {
                                            dataValues.push([
                                                cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                                                cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
                                            ]);
                                            return cfg.w / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total));
                                        })
                                        .attr("cy", function (j, i) {
                                            return cfg.h / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total));
                                        })
                                        .attr("data-id", function (j) {
                                            return j.axis;
                                        })
                                        .style("fill", cfg.color(series)).style("fill-opacity", .9)
                                        .on('mouseover', function (d) {
                                            newX = parseFloat(d3.select(this).attr('cx')) - 10;
                                            newY = parseFloat(d3.select(this).attr('cy')) - 5;

                                            tooltip.attr('x', newX)
                                            .attr('y', newY)
                                            .text(d.value)
                                            .transition(200)
                                            .style('opacity', 1);

                                            z = "polygon." + d3.select(this).attr("class");
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", 0.1);
                                            g.selectAll(z)
                                            .transition(200)
                                            .style("fill-opacity", 0.7);
                                        })
                                        .on('mouseout', function () {
                                            tooltip.transition(200)
                                            .style('opacity', 0);
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", cfg.opacityArea);
                                        })
                                        .append("svg:title")
                                        .text(function (j) {
                                            return Math.max(j.value, 0);
                                        });

                                        series++;
                                    });

                                    //Tooltip
                                    tooltip = g.append('text')
                                    .style('opacity', 0)
                                    .style('font-family', 'sans-serif')
                                    .style('font-size', textSizeTooltip);
                                }
                            };

                            // Options for the Radar chart, other than default
                            var myOptions = {
                                w: w
                                , h: h
                                , ExtraWidthX: 180
                                , labelScale: 0.7
                                , levels: 5
                                , levelScale: 0.85
                                , facetPaddingScale: 1.9
                                , maxValue: 0.6
                                , showAxes: true
                                , showAxesLabels: true
                                , showLegend: true
                                , showLevels: true
                                , showLevelsLabels: false
                                , showPolygons: true
                                , showVertices: true
                            };

                            RadarChart.draw(divId, json, myOptions);

                            ////////////////////////////////////////////
                            /////////// Initiate legend ////////////////
                            ////////////////////////////////////////////

                            var svg = d3.select('#chart-radar')
                            .selectAll('svg')
                            .append('svg')
                            .attr("width", w + 300)
                            .attr("height", h)
                            .style("font-size", textSizeLegend);

                            // Initiate Legend
                            var legend = svg.append("g")
                            .attr("class", "legend")
                            .attr("height", 100)
                            .attr("width", 200)
                            .attr('transform', 'translate(90,20)');

                            // Create colour squares
                            legend.selectAll('rect')
                            .data(legendOptions)
                            .enter()
                            .append("rect")
                            .attr("x", w - 8)
                            .attr("y", function (d, i) {
                                return i * 20;
                            })
                            .attr("width", 10)
                            .attr("height", 10)
                            .style("fill", function (d, i) {
                                return colorscale(i);
                            });

                            // Create text next to squares
                            legend.selectAll('text')
                            .data(legendOptions)
                            .enter()
                            .append("text")
                            .attr("x", w + 3)
                            .attr("y", function (d, i) {
                                return i * 20 + 9;
                            })
                            .attr("font-size", textSizeLegend)
                            .attr("fill", "#737373")
                            .text(function (d) {
                                return d;
                            });
                        };
                        drawRadarCharts();
                    }
                    OcultarPopupposition();
                });
            }
        });

        //DESCARGA A EXCEL LA GRAFICA PARCIAL
        $('#descargarExcelParcial').on('click', function () {
            var urlAccion = '/ObtenerExcelPorcentajeObtenido?ideval=' + ideval;
            var cicloSelect = $('#cicloActual').val();
            if (cicloSelect == '') {
                swal('Atención', 'Seleccione el informe que desea descargar.');
                return false;
            }
            $.ajax({
                url: urlReportes + '/ObtenerInformeExccel',
                type: 'post'
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = urlReportes + urlAccion;
            })
        });
        //DESCARGA A EXCEL LA GRAFICA ACTUAL
        $("#descargarGraficaFinalExcel").on("click", function () {
            var cicloSelect = $('#cicloActual').val();
            if (cicloSelect == '') {
                swal('Atención', 'Seleccione el informe que desea descargar.');
                return false;
            }
            $.ajax({
                url: '../EvaluacionEstandarMinimo/CalificacionFinal',
                type: 'post',
                data: { idCiclo: cicloSelect }
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = '../EvaluacionEstandarMinimo/ObtenerCalificacionFinalExcel';
            })
        });

        //DESCARGA A PDF LA GRAFICA ACTUAL
        $("#descargarGraficaFinalpdf").on("click", function () {
            var cicloSelect = $('#cicloActual').val();
            $.ajax({
                url: '../EvaluacionEstandarMinimo/CalificacionFinal',
                type: 'post',
                data: { idCiclo: cicloSelect }
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = '../EvaluacionEstandarMinimo/ObtenerCalificacionFinalPdf';
            })
        });

        //DESCARGA EL EXCEL DE ESTANDARES MINIMOS
        $("#descargarEstandaresMinimos").on("click", function () {
            $.ajax({
                url: '../EvaluacionEstandarMinimo/ObtenerInformeExccel',
                type: 'post',
                data: ''
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = '../EvaluacionEstandarMinimo/DescargarInformeExccel?ideval=' + ideval;
            })
        });
    });

</script>
